Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 14-15  | Added on Sunday, 21 May 23 21:39:26 GMT-03:00

2 minutos no fogo 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 15  | Added on Sunday, 21 May 23 21:39:34 GMT-03:00

bater tudo junto 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 30  | Added on Sunday, 21 May 23 21:41:42 GMT-03:00

se pensa de café. 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 30  | Added on Sunday, 21 May 23 21:41:57 GMT-03:00

azedo de limão 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 30-31  | Added on Sunday, 21 May 23 21:42:07 GMT-03:00

(suco de limão quente). 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 33  | Added on Sunday, 21 May 23 21:42:48 GMT-03:00

Ciabatta Rústica 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 35  | Added on Sunday, 21 May 23 21:43:24 GMT-03:00

dois desse 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 36  | Added on Sunday, 21 May 23 21:44:03 GMT-03:00

1 colher de mesa 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 36  | Added on Sunday, 21 May 23 21:44:14 GMT-03:00

em pós 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 36  | Added on Sunday, 21 May 23 21:44:24 GMT-03:00

1 colher de mesa 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 39  | Added on Sunday, 21 May 23 21:44:52 GMT-03:00

imergindo 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 39  | Added on Sunday, 21 May 23 21:47:33 GMT-03:00

esticando em um retângulo 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 40  | Added on Sunday, 21 May 23 21:47:41 GMT-03:00

e divida 
==========
Blogue do Caloni (Rascunhos) (Wanderley Caloni)
- Highlight Loc. 42  | Added on Sunday, 21 May 23 21:48:35 GMT-03:00

para 220 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 735-39  | Added on Sunday, 21 May 23 22:06:27 GMT-03:00

Code-level reversing is really an art form. Extracting design concepts and algorithms from a program binary is a complex process that requires a mastery of reversing techniques along with a solid understanding of software development, the CPU, and the operating system. Software can be highly complex, and even those with access to a program's well-written and well properly-documented source code are often amazed at how difficult it can be to comprehend. Deciphering the sequences of low-level instructions that make up a program is usually no mean feat. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 825-29  | Added on Sunday, 21 May 23 22:19:47 GMT-03:00

The primary claim made by Sega was that copies made by Accolade during the reverse-engineering process (known as “intermediate copying”) violated copyright laws. The court eventually ruled in Accolade's favor because Accolade's games didn't actually contain any of Sega's code, and because of the public benefit resulting from Accolade's work (by way of introducing additional competition in the market). This was an important landmark in the legal history of reverse engineering because in this ruling the court essentially authorized reverse engineering for the purpose of interoperability. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1236-38  | Added on Sunday, 21 May 23 22:56:31 GMT-03:00

The complexity in reversing arises when we try to create an intuitive link between the high-level concepts described earlier and the low-level perspective we get when we look at a program's binary. It is critical that you develop a sort of “mental image” of how high-level constructs such as procedures, modules, and variables are implemented behind the curtains. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1305-8  | Added on Monday, 22 May 23 00:48:51 GMT-03:00

Detecting the case where a register is used simply to allow instructions access to specific values is very easy because the register is used only for transferring a value from memory to the instruction or the other way around. In other cases, you will see the same register being repeatedly used and updated throughout a single function. This is often a strong indication that the register is being used for storing a local variable that was defined in the source code. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1337-38  | Added on Monday, 22 May 23 00:55:39 GMT-03:00

The stack is frequently used for temporarily saving the value of a register and then restoring the saved value to that register. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1343-44  | Added on Monday, 22 May 23 00:57:00 GMT-03:00

It should be noted that when dealing with local variables data is not pushed and popped onto the stack, but instead the stack is accessed using offsets, like a data structure. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1346-47  | Added on Monday, 22 May 23 00:57:41 GMT-03:00

In a function call, the caller almost always passes parameters to the callee and is responsible for storing the current instruction pointer so that execution can proceed from its current position once the callee completes. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1354-57  | Added on Monday, 22 May 23 00:59:06 GMT-03:00

For reversers, locating heaps in memory and properly identifying heap allocation and freeing routines can be helpful, because it contributes to the overall understanding of the program's data layout. For instance, if you see a call to what you know is a heap allocation routine, you can follow the flow of the procedure's return value throughout the program and see what is done with the allocated block, and so on. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1363-64  | Added on Monday, 22 May 23 01:00:45 GMT-03:00

An excellent example of preinitialized data is any kind of hard-coded string inside a program. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1371-72  | Added on Monday, 22 May 23 01:01:56 GMT-03:00

hard-coded memory addresses are rarely used for anything other than pointing to the executable's data section. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1383-86  | Added on Monday, 22 May 23 01:04:28 GMT-03:00

One of the problems is that most high-level conditional statements are just too lengthy for low-level languages such as assembly language, so they are broken down into sequences of operations. The key to understanding these sequences, the correlation between them, and the high-level statements from which they originated, is to understand the low-level control flow constructs and how they can be used for representing high-level control flow statements. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1390-92  | Added on Monday, 22 May 23 01:05:03 GMT-03:00

For most purposes, assembly language is the language of reversing, and mastering it is an essential step in becoming a real reverser, because with most programs assembly language is the only available link to the original source code. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1422-24  | Added on Monday, 22 May 23 01:08:52 GMT-03:00

A stack frame can be defined as the current function's stack zone, which resides between the stack pointer (ESP) and the base pointer (EBP). 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1424-25  | Added on Monday, 22 May 23 01:09:38 GMT-03:00

The base pointer usually points to the stack position right after the return address for the current function. Stack frames are used for gaining quick and convenient access to both local variables and to the parameters passed to the current function. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1496-97  | Added on Saturday, 27 May 23 11:41:41 GMT-03:00

For detailed information on each instruction refer to the IA-32 Intel Architecture Software Developer's Manual, Volume 2A and Volume 2B [Intel2, Intel3]. These are the (freely available) IA-32 instruction set reference manuals from Intel. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1514-15  | Added on Saturday, 27 May 23 11:44:52 GMT-03:00

This is a generic rule in IA-32 instructions: with a few exceptions, most instructions can only take one memory operand. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1559-62  | Added on Saturday, 27 May 23 11:50:08 GMT-03:00

In essence, CMP simply subtracts Operand2 from Operand1 and discards the result, while setting all of the relevant flags to correctly reflect the outcome of the subtraction. For example, if the result of the subtraction is zero, the Zero Flag (ZF) is set, which indicates that the two operands are equal. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1667-69  | Added on Saturday, 27 May 23 13:11:54 GMT-03:00

The bottom line is that developing an understanding of the processes undertaken by compilers and the way they “perceive” the code will help in eventually deciphering their output. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1672-73  | Added on Saturday, 27 May 23 13:12:48 GMT-03:00

I firmly believe that reversers must truly know their systems, and no one can truly claim to understand the system without understanding how software is created and built. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1675-79  | Added on Saturday, 27 May 23 13:13:51 GMT-03:00

If you'd like to deepen your knowledge of compilers and compiler optimizations, you should check out [Cooper] Keith D. Copper and Linda Torczon. Engineering a Compiler. Morgan Kaufmann Publishers, 2004, for a highly readable tutorial on compilation techniques, or [Muchnick] Steven S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann Publishers, 1997, for a more detailed discussion of advanced compilation materials such as optimizations, and so on. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1779-82  | Added on Saturday, 27 May 23 13:42:25 GMT-03:00

Because most modern processors can handle multiple instructions at once, data dependencies between individual instructions become an issue. This means that if an instruction performs an operation and stores the result in a register, immediately reading from that register in the following instruction would cause a delay, because the result of the first operation might not be available yet. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1783-84  | Added on Saturday, 27 May 23 13:43:31 GMT-03:00

The end result is interleaved code, where two instruction sequences dealing with two separate things are interleaved to create one sequence of instructions. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1936-40  | Added on Saturday, 27 May 23 14:31:02 GMT-03:00

In order to implement the relatively complex IA-32 instructions, the processor has a microcode ROM, which contains the microcode sequences for every instruction in the instruction set. The process of constantly fetching instruction microcode from ROM can create significant performance bottlenecks, so IA-32 processors employ an execution trace cache that is responsible for caching the microcodes of frequently executed instructions. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 1985-87  | Added on Saturday, 27 May 23 14:42:04 GMT-03:00

In order to improve the processor's prediction abilities, IA-32 processors employ a branch trace buffer (BTB) which records the results of the most recent branch instructions processed. This way when a branch is encountered, it is searched in the BTB. If an entry is found, the processor uses that information for predicting the branch. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2077-79  | Added on Saturday, 27 May 23 14:57:13 GMT-03:00

Kernel mode is basically the Windows term for the privileged processor mode and is frequently used for describing code that runs in privileged mode or memory that is only accessible while the processor is in privileged mode. User mode is the nonprivileged mode: when the system is in user mode, it can only run user-mode code and can only access user-mode memory. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2086-89  | Added on Saturday, 27 May 23 14:59:33 GMT-03:00

Internally, paging is easy to implement on virtual memory systems. The system must maintain some kind of measurement on when a page was last accessed (the processor helps out with this), and use that information to locate pages that haven't been used in a while. Once such pages are located, the system can flush their contents to a file and invalidate their page-table entries. The contents of these pages in physical memory can then be discarded and the space can be used for other purposes. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2090-92  | Added on Saturday, 27 May 23 14:59:58 GMT-03:00

Later, when the flushed pages are accessed, the processor will generate page fault (because their page-table entries are invalid), and the system will know that they have been paged out. At this point the operating system will access the paging file (which is where all paged-out memory resides), and read the data back into memory. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2095-97  | Added on Saturday, 27 May 23 15:01:07 GMT-03:00

In reality, this only works when applications don't actively use more memory than is physically available, because in such cases the system would have to move data back and forth between physical memory and the hard drive. Because hard drives are generally about 1,000 times slower than physical memory, such situations can bring cause systems to run incredibly slowly. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2107-8  | Added on Saturday, 27 May 23 15:03:06 GMT-03:00

A working set is a per-process data structure that lists the current physical pages that are in use in the process's address space. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2111-13  | Added on Saturday, 27 May 23 15:03:56 GMT-03:00

It can be said that the memory usage of a process at any given moment can be measured as the total size of its working set. That's generally true, but is a bit of an oversimplification because significant chunks of the average process address space contain shared memory, which is also counted as part of the total working set size. Measuring memory usage in a virtual memory system is not a trivial task! 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2125-26  | Added on Saturday, 27 May 23 15:05:53 GMT-03:00

applications only have a 31-bit address space—the most significant bit is always clear in every address. This provides a tiny reversing hint: A 32-bit number whose first hexadecimal digit is 8 or above is not a valid user-mode pointer. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2143-48  | Added on Saturday, 27 May 23 15:10:34 GMT-03:00

Caching is implemented in Windows by mapping files into memory and allowing the memory manager to manage the amount of physical memory allocated to each mapped file. When a program opens a file, a section object (see below) is created for it, and it is mapped into the system cache area. When the program later accesses the file using the ReadFile or WriteFile APIs, the file system internally accesses the mapped copy of the file using cache manager APIs such as CcCopyRead and CcCopyWrite. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2151-56  | Added on Saturday, 27 May 23 15:12:57 GMT-03:00

The Terminal Services component is a Windows service that allows for multiple, remote GUI sessions on a single Windows system. In order to implement this feature, Microsoft has made the Win32 memory space “session private,” so that the system can essentially load multiple instances of the Win32 subsystem. In the kernel, each instance is loaded into the same virtual address, but in a different session space. The session space contains the WIN32K.SYS executable, and various data structures required by the Win32 subsystem. There is also a special session pool, which is essentially a session private paged pool that also resides in this region. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2157-58  | Added on Saturday, 27 May 23 15:15:06 GMT-03:00

Page Tables and Hyper Space These two regions contain process-specific data that defines the current process's address space. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2160-63  | Added on Saturday, 27 May 23 15:16:55 GMT-03:00

System Working Set The system working set is a system-global data structure that manages the system's physical memory use (for pageable memory only). It is needed because large parts of the contents of the kernel memory address space are pageable, so the system must have a way of keeping track of the pages that are currently in use. The two largest memory regions that are managed by this data structure are the paged pool and the system cache. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2166-68  | Added on Saturday, 27 May 23 15:18:12 GMT-03:00

Internally, the kernel uses the System PTE space for mapping device driver executables and for storing kernel stacks (there is one for each thread in the system). Device drivers can allocate System PTE regions by calling the MmAllocateMappingAddress kernel API. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2174-76  | Added on Saturday, 27 May 23 15:19:36 GMT-03:00

One of the key properties of section objects is that they can be mapped to more than one place. This makes section objects a convenient tool for applications to share memory between them. The system also uses section objects to share memory between the kernel and user-mode processes. This is done by mapping the same section object into both the kernel address space and one or more user-mode address spaces. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2176-78  | Added on Saturday, 27 May 23 15:20:02 GMT-03:00

Finally, it should be noted that the term “section object” is a kernel concept—in Win32 (and in most of Microsoft's documentation) they are called memory mapped files. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2188-89  | Added on Saturday, 27 May 23 15:21:53 GMT-03:00

The system uses file-backed section objects for a variety of purposes, including the loading of executable images. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2191-92  | Added on Saturday, 27 May 23 15:24:13 GMT-03:00

A Virtual Address Descriptor (VAD) tree is the data structure used by Windows for managing each individual process's address allocation. The VAD tree is a binary tree that describes every address range that is currently in use. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2206-9  | Added on Saturday, 27 May 23 15:25:24 GMT-03:00

Most Windows applications don't directly call VirtualAlloc—instead they allocate a heap block by calling a runtime library function such as malloc or by calling a system heap API such as HeapAlloc. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2254-57  | Added on Saturday, 27 May 23 15:31:45 GMT-03:00

Viewing objects from user mode, as most applications do, gives them a somewhat mysterious aura. It is important to understand that under the hood all of these objects are merely data structures—they are typically stored in nonpaged pool kernel memory. All objects use a standard object header that describes the basic object properties such as its type, reference count, name, etc and so on. The object manager is not aware of any object-specific data structures, only of the generic header. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2258-60  | Added on Saturday, 27 May 23 15:33:54 GMT-03:00

Kernel code typically accesses objects using direct pointers to the object data structures, but application programs obviously can't do that. Instead, applications use handles for accessing individual objects. A handle is a process specific numeric identifier which is essentially an index into the process's private handle table. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2261-62  | Added on Saturday, 27 May 23 15:34:44 GMT-03:00

Along with the object pointer, each handle entry also contains an access mask that determines which types of operations that can be performed on the object using this specific handle. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2266-72  | Added on Saturday, 27 May 23 15:36:57 GMT-03:00

The object's access mask is a 32-bit integer that is divided into two 16-bit access flag words. The upper word contains generic access flags such as GENERIC_READ and GENERIC_WRITE. The lower word contains object specific flags such as PROCESS_TERMINATE,which allows you to terminate a process using its handle, or KEY_ENUMERATE_SUB_KEYS , which allows you to enumerate the subkeys of an open registry key. All access rights constants are defined in WinNT.H in the Microsoft Platform SDK. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2280-84  | Added on Saturday, 27 May 23 15:40:09 GMT-03:00

When an object creation API such as CreateMutex is called for an object that already exists, the kernel automatically locates that object in the global table and returns a handle to it. Named objects are arranged in hierarchical directories, but the Win32 API restricts user-mode applications' access to these directories. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2285-87  | Added on Saturday, 27 May 23 15:41:25 GMT-03:00

BaseNamedObjects This directory is where all conventional Win32 named objects, such as mutexes, are stored. All named-object Win32 APIs automatically use this directory—application programs have no control over this. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2299-2300  | Added on Saturday, 27 May 23 15:43:18 GMT-03:00

Some kernel objects are unnamed and are only identified by their handles or kernel object pointers. A good example of such an object is a thread object, which is created without a name and is only represented by handles (from user mode) and by a direct pointer into the object (from kernel mode). 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2315-17  | Added on Saturday, 27 May 23 15:45:52 GMT-03:00

Internally, a thread is nothing but a data structure that has a CONTEXT data structure telling the system the state of the processor when the thread last ran, combined with one or two memory blocks that are used for stack space. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2326-29  | Added on Saturday, 27 May 23 15:47:57 GMT-03:00

The components that manage threads in Windows are the scheduler and the dispatcher, which are together responsible for deciding which thread gets to run for how long, and for performing the actual context switch when its time to change the currently running thread. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2329-31  | Added on Saturday, 27 May 23 15:48:25 GMT-03:00

An interesting aspect of the Windows architecture is that the kernel is preemptive and interruptible, meaning that a thread can usually be interrupted while running in kernel mode just like as it can be interrupted while running in user mode. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2393-2415  | Added on Sunday, 28 May 23 10:22:52 GMT-03:00

In many reversing experiences, I've found that it's important to have an understanding of what happens when a process is started. The following provides a brief description of the steps taken by the system in an average process creation sequence. 1.The creation of the process object and new address space is the first step: When a process calls the Win32 API CreateProcess, the API creates a process object and allocates a new memory address space for the process. 2. CreateProcess maps NTDLL.DLL and the program executable (the .exefile) into the newly created address space. 3. CreateProcess creates the process's first thread and allocates stack space for it. 4. The process's first thread is resumed and starts running in the LdrpInitialize function inside NTDLL.DLL. 5.LdrpInitialize recursively traverses the primary executable's import tables and maps into memory every executable that is required for running the primary executable. 6. At this point control is passed into LdrpRunInitializeRoutines, which is an internal NTDLL.DLL routine responsible for initializing all statically linked DLLs currently loaded into the address space. The initialization process consists of calling each DLL's entry point with the DLL_PROCESS_ATTACH constant. 7. Once all DLLs are initialized, LdrpInitialize calls the thread's real initialization routine, which is the BaseProcessStartfunction from KERNEL32.DLL. This function in turn calls the executable's WinMain entry point, at which point the process has completed its initialization sequence. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2418-20  | Added on Sunday, 28 May 23 10:24:09 GMT-03:00

If you're going to be reversing under Windows, it is imperative that you develop a solid understanding of the Windows APIs and of the common methods of doing things using these APIs. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2433-36  | Added on Sunday, 28 May 23 10:26:10 GMT-03:00

If you're going to be doing serious reversing of Windows applications, it is going to be important for you to understand the Win32 API. That's because no matter which high-level interface an application employs (if any), it is eventually going to use the Win32 API for communicating with the OS. Some applications will use the Native native API, but that's quite rare—see 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2437-39  | Added on Sunday, 28 May 23 10:26:33 GMT-03:00

The Core Win32 API contains roughly 2000 APIs (it depends on the specific Windows version and on whether or not you count undocumented Win32 APIs). These APIs are divided into three categories: Kernel, USER, and GDI. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2444-46  | Added on Sunday, 28 May 23 10:29:59 GMT-03:00

Kernel APIs (also called the BASE APIs) are implemented in the KERNEL32.DLL module and include all non-GUI-related services, such as file I/O, memory management, object management, process and thread management, and so on. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2450-51  | Added on Sunday, 28 May 23 10:30:29 GMT-03:00

GDI APIs are implemented in the GDI32.DLL and include low-level graphics services such as those for drawing a line, displaying a bitmap, and so on. GDI is generally not aware of the existence of windows or controls. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2455-57  | Added on Sunday, 28 May 23 10:30:46 GMT-03:00

USER APIs are implemented in the USER32.DLL module and include all higher-level GUI-related services such as window-management, menus, dialog boxes, user-interface controls, and so on. All GUI objects are drawn by USER using GDI calls to perform the actual drawing; USER heavily relies on GDI to do its business. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2464-66  | Added on Sunday, 28 May 23 10:31:56 GMT-03:00

Application programs are never supposed to directly call into the native API—that would break their compatibility with Windows 9 x. This is one of the reasons why Microsoft never saw fit to actually document it; 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2466-67  | Added on Sunday, 28 May 23 10:32:22 GMT-03:00

Also, by not exposing the native API, Microsoft retained the freedom to change and revise it without affecting Win32 applications. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2471-78  | Added on Sunday, 28 May 23 10:33:30 GMT-03:00

Technically, the native API is a set of functions exported from both NTDLL.DLL (for user-mode callers) and from NTOSKRNL.EXE (for kernel-mode callers). APIs in the native API always start with one of two prefixes: either Nt or Zw, so that functions have names like NtCreateFile or ZwCreateFile. If you're wondering what Zw stands for—I'm sorry, I have no idea. The one thing I do know is that every native API has two versions, an Nt version and a Zw version. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2482-87  | Added on Sunday, 28 May 23 10:37:06 GMT-03:00

The reason you would want to go through the system-call mechanism when calling an API from kernel-mode kernel mode is to “prove” to the API being called that you're actually calling it from kernel-mode kernel mode. If you don't do that, the API might think it is being called from user-mode code and will verify that all parameters only contain user-mode addresses. This is a safety mechanism employed by the system to make sure user-mode user mode calls don't corrupt the system by passing kernel-memory pointers. For kernel-mode code, calling the Zw APIs is a way to simplify the process of calling functions because you can pass regular kernel-mode pointers. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2488-90  | Added on Sunday, 28 May 23 10:37:33 GMT-03:00

If you'd like to use or simply understand the workings of the native API, it has been almost fully documented by Gary Nebbett in Windows NT/2000 Native API Reference. Macmillan Technical Publishing, 2000. [Nebbett]. System 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2488-89  | Added on Sunday, 28 May 23 10:37:47 GMT-03:00

If you'd like to use or simply understand the workings of the native API, it has been almost fully documented by Gary Nebbett in Windows NT/2000 Native API Reference. Macmillan Technical Publishing, 2000. [Nebbett]. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2498-2500  | Added on Sunday, 28 May 23 10:39:29 GMT-03:00

The general idea is that the user-mode code invokes a special CPU instruction that tells the processor to switch to its privileged mode (the CPUs terminology for kernel-mode execution) and call a special dispatch routine. This dispatch routine then calls the specific system function requested from user mode. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2503-8  | Added on Sunday, 28 May 23 10:40:30 GMT-03:00

The following sequence is a typical Windows 2000 system call. ntdll!ZwReadFile: 77f8c552 mov eax,0xa1 77f8c557 lea edx,[esp+0x4] 77f8c55b int 2e 77f8c55d ret 0x24 The EAX register is loaded with the service number (we'll get to this in a minute), and EDX points to the first parameter that the kernel-mode function receives. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2508-18  | Added on Sunday, 28 May 23 10:41:49 GMT-03:00

When the int 2e instruction is invoked, the processor uses the interrupt descriptor table (IDT) in order to determine which interrupt handler to call. The IDT is a processor-owned table that tells the processor which routine to invoke whenever an interrupt or an exception takes place. The IDT entry for interrupt number 2E points to an internal NTOSKRNL function called KiSystemService, which is the kernel service dispatcher. KiSystemService verifies that the service number and stack pointer are valid and calls into the specific kernel function requested. The actual call is performed using the KiServiceTable array, which contains pointers to the various supported kernel services. KiSystemService simply uses the request number loaded into EAX as an index into KiServiceTable. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2518-44  | Added on Sunday, 28 May 23 10:44:16 GMT-03:00

More recent versions of the operating systems use an optimized version of the same mechanism. Instead of invoking an interrupt in order to perform the switch to kernel-mode kernel mode, the system now uses the special SYSENTER instruction in order to perform the switch. SYSENTER is essentially a high-performance kernel-mode switch instruction that calls into a predetermined function whose address is stored at a special model specific register (MSR) called SYSENTER_EIP_MSR. Needless to say, the contents of MSRs can only be accessed from kernel mode. Inside the kernel the new implementation is quite similar and goes through KiSystemService and KiServiceTablein the same way it did in Windows 2000 and older systems. The following is a typical system API in recent versions of Windows such as Windows Server 2003 and Windows XP. ntdll!ZwReadFile: 77f4302f mov eax,0xbf 77f43034 mov edx,0x7ffe0300 77f43039 call edx 77f4303b ret 0x24 This function calls into SharedUserData!SystemCallStub (every system call goes through this function). The following is a disassembly of the code at 7ffe0300. SharedUserData!SystemCallStub: 7ffe0300 mov edx,esp 7ffe0302 sysenter 7ffe0304 ret If you're wondering why this extra call is required (instead of just invoking SYSENTER from within the system API), it's because SYSENTER records no state information whatsoever. In the previous implementation, the invocation of int 2e would store the current value of the EIP and EFLAGS registers. SYSENTER on the other hand stores no state information, so by calling into the SystemCallStub the operating system is recording the address of the current user-mode stub in the stack, so that it later knows where to return. Once the kernel completes the call and needs to go back to user mode, it simply jumps to the address recorded in the stack by that call from the API into SystemCallStub; the RET instruction at 7ffe0304 is never actually executed. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2554-56  | Added on Sunday, 28 May 23 10:46:28 GMT-03:00

Probably the most important thing to bear in mind when dealing with executable files is that they're relocatable. This simply means that they could be loaded at a different virtual address each time they are loaded (but they can never be relocated after they have been loaded). 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2571-76  | Added on Sunday, 28 May 23 10:51:57 GMT-03:00

The question is, what address should the compiler and linker write as the address to pGlobalVariable while generating the executable? Usually, you would just write a relative address— an address that's relative to the beginning of the file. This way you wouldn't have to worry about where the file gets loaded. The problem is this is a code sequence that gets executed directly by the processor. You could theoretically generate logic that would calculate the exact address by adding the relative address to the base address where the executable is currently mapped, but that would incur a significant performance penalty. Instead, the loader just goes over the code and modifies all absolute addresses within it to make sure that they point to the right place. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2580-84  | Added on Sunday, 28 May 23 10:52:14 GMT-03:00

Relocations are important for several reasons. First of all, they're the reason why there are never absolute addresses in executable headers, only in code. Whenever you have a pointer inside the executable header, it'll always be in the form of a relative virtual address (RVA). An RVA is just an offset into the file. When the file is loaded and is assigned a virtual address, the loader calculates real virtual addresses out of RVAs by adding the module's base address (where it was loaded) to an RVA. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2585-87  | Added on Sunday, 28 May 23 10:53:14 GMT-03:00

An executable image is divided into individual sections in which the file's contents are stored. Sections are needed because different areas in the file are treated differently by the memory manager when a module is loaded. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2599-2609  | Added on Sunday, 28 May 23 10:59:48 GMT-03:00

Because individual sections often have different access settings defined in the executable header, and because the memory manager must apply these access settings when an executable image is loaded, sections must typically be page-aligned when an executable is loaded into memory. On the other hand, it would be wasteful to actually align executables to a page boundary on disk—that would make them significantly bigger than they need to be. Because of this, the PE header has two different kinds of alignment fields: Section alignment and file alignment. Section alignment is how sections are aligned when the executable is loaded in memory and file alignment is how sections are aligned inside the file, on disk. Alignment is important when accessing the file because it causes some interesting phenomena. The problem is that an RVA is relative to the beginning of the image when it is mapped as an executable (meaning that distances are calculated using section alignment). This means that if you just open an executable as a regular file and try to access it, you might run into problems where RVAs won't point to the right place. This is because RVAs are computed using the file's section alignment (which is effectively its in-memory alignment), and not using the file alignment. 
==========
Eldad Eilam - Reversing_ secrets of reverse engineering-Wiley (2005) (Eldad Eilam)
- Highlight Loc. 2636-38  | Added on Sunday, 28 May 23 11:04:25 GMT-03:00

A PE file starts with the good old DOS header. This is a common backward-compatible design that ensures that attempts to execute PE files on DOS systems will fail gracefully. In this case failing gracefully means that you'll just get the well-known “This program cannot be run in DOS mode” message. 
==========
