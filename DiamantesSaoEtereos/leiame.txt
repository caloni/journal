Precisa de um tratador de mensagens que deve relacionar o tipo da mensagem (um enum) com seu código tratador (uma função/método)? A primeiríssima coisa que todo DNA de programador com XGH na veia faria é um switch para identificar o tipo da mensagem e chamar seu tratador:

[github,DiamantesSaoEtereos/Teste1.cpp,cpp]

Agora imagine que esse tratador é exigido dentro de uma classe e que existem infinitos tipos de mensagens para ser tratadas, muitas delas não diretamente relacionadas com a classe.

class IMessage // muitas mensagens herdam dessa interface
{
public:
    virtual MSG_TYPE GetType() = 0;
};

class ITratador
{
public:
    virtual void Process(IMessage* msg) = 0;
};

class Tratador : public ITratador
{
public:
    void Do(IMessage* msg);

protected:
    void DoSomething();
    void DoSomethingElse();
};

void Tratador::Process(IMessage* msg)
{
    switch( msg->GetType() )
    {
    case MSG_TYPE1:
        DoSomething(msg);
        break;

    case MSG_TYPE2:
        DoSomethingElse(msg);
        break;
    }
}

Multiplique o número de itens desse switch por 200 e terá uma vaga ideia do que pode ocorrer no futuro (dica: XGH).

Solução: herança!
